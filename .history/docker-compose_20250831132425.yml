version: '3.8'

services:
  ai-security-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - SECURITY_KEY=${SECURITY_KEY:-dev-secret-key-change-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  ai-security-frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    volumes:
      - ./src/frontend:/app/src
    depends_on:
      - ai-security-api
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-dev-redis-password}
    volumes:
      - redis_data:/data
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ai_security
      - POSTGRES_USER=ai_security_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dev-postgres-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped

  security-monitor:
    build:
      context: .
      dockerfile: docker/Dockerfile.monitor
    environment:
      - API_URL=http://ai-security-api:8000
      - POSTGRES_URL=postgresql://ai_security_user:${POSTGRES_PASSWORD:-dev-postgres-password}@postgres:5432/ai_security
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev-redis-password}@redis:6379
    volumes:
      - ./logs:/app/logs
    depends_on:
      - ai-security-api
      - postgres
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: ai-security-network